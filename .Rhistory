#Will be used later for the discussion on why google entry level is so high
exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
round(1486.0516189, -2)
#Will be used later for the discussion on why google entry level is so high
exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
#Will be used later for the discussion on why google entry level is so high
res = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = race[i], Education = "Bachelor's Degree"), interval = "prediction"))[1]
#Initializing variables for predicting a persons salary based upon their race
race = c("White", "Black", "Hispanic", "Asian", "Two Or More")
amazon_salaries_race = rep(0, length(unique(salaries$Race)))
google_salaries_race = rep(0, length(unique(salaries$Race)))
for(i in 1:length(unique(salaries$Race))) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = race[i], Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = race[i], Education = "Bachelor's Degree")))
amazon_salaries_race[i] = sal1
google_salaries_race[i] = sal2
}
# Initializing variables for predicting a person's salary based upon their gender
gender = c("Male", "Female")
amazon_salaries_gender = rep(0, length(gender))
google_salaries_gender = rep(0, length(gender))
for(i in 1:length(gender)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = gender[i], Race = "White", Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = gender[i], Race = "White", Education = "Bachelor's Degree")))
amazon_salaries_gender[i] = sal1
google_salaries_gender[i] = sal2
}
# Initializing variables for predicting a person's salary based upon their education level
education_levels = c("Highschool", "Bachelor's Degree", "Master's Degree", "PhD", "Some College")
amazon_salaries_education = rep(0, length(education_levels))
google_salaries_education = rep(0, length(education_levels))
for(i in 1:length(education_levels)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = education_levels[i])))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = education_levels[i])))
amazon_salaries_education[i] = sal1
google_salaries_education[i] = sal2
}
#Predict salaries across each quartile
employee_q1 = data.frame(company = "Amazon", level = "L3", title = "Human Resources", yearsofexperience = 5, gender = "Female", Race = "Asian", Education = "Master's Degree") #61000
employee_q2 = data.frame(company = "Google", level = "L8", title = "Technical Program Manager", yearsofexperience = 22, gender = "Female", Race = "White", Education = "Bachelor's Degree") #694000
employee_q3 = data.frame(company = "Amazon", level = "L7", title = "Software Engineering Manager", yearsofexperience = 18, gender = "Other", Race = "Two Or More", Education = "Master's Degree") #800000
employee_q4 = data.frame(company = "Google", level = "L8", title = "Software Engineer", yearsofexperience = 23, gender = "Male", Race = "White", Education = "Bachelor's Degree") #1160000
pred_salary_q1 = exp(predict(aic_model_final, newdata = employee_q1))
pred_salary_q2 = exp(predict(aic_model_final, newdata = employee_q2))
pred_salary_q3 = exp(predict(aic_model_final, newdata = employee_q3))
pred_salary_q4 = exp(predict(aic_model_final, newdata = employee_q4))
actual_salary_q1 = 61000
actual_salary_q2 = 694000
actual_salary_q3 = 800000
actual_salary_q4 = 1160000
pe_q1 = get_percent_error(pred_salary_q1, actual_salary_q1)
pe_q2 = get_percent_error(pred_salary_q2, actual_salary_q2)
pe_q3 = get_percent_error(pred_salary_q3, actual_salary_q3)
pe_q4 = get_percent_error(pred_salary_q4, actual_salary_q4)
##Predicted L1 salaries based on company
amazon_l1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
google_l1 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
#Initializing variables for predicting a persons salary based upon their race
race = c("White", "Black", "Hispanic", "Asian", "Two Or More")
amazon_salaries_race = rep(0, length(unique(salaries$Race)))
google_salaries_race = rep(0, length(unique(salaries$Race)))
for(i in 1:length(unique(salaries$Race))) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = race[i], Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = race[i], Education = "Bachelor's Degree")))
amazon_salaries_race[i] = sal1
google_salaries_race[i] = sal2
}
# Initializing variables for predicting a person's salary based upon their gender
gender = c("Male", "Female")
amazon_salaries_gender = rep(0, length(gender))
google_salaries_gender = rep(0, length(gender))
for(i in 1:length(gender)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = gender[i], Race = "White", Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = gender[i], Race = "White", Education = "Bachelor's Degree")))
amazon_salaries_gender[i] = sal1
google_salaries_gender[i] = sal2
}
# Initializing variables for predicting a person's salary based upon their education level
education_levels = c("Highschool", "Bachelor's Degree", "Master's Degree", "PhD", "Some College")
amazon_salaries_education = rep(0, length(education_levels))
google_salaries_education = rep(0, length(education_levels))
for(i in 1:length(education_levels)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = education_levels[i])))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L1", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = education_levels[i])))
amazon_salaries_education[i] = sal1
google_salaries_education[i] = sal2
}
#Predict salaries across each quartile
employee_q1 = data.frame(company = "Amazon", level = "L3", title = "Human Resources", yearsofexperience = 5, gender = "Female", Race = "Asian", Education = "Master's Degree") #61000
employee_q2 = data.frame(company = "Google", level = "L8", title = "Technical Program Manager", yearsofexperience = 22, gender = "Female", Race = "White", Education = "Bachelor's Degree") #694000
employee_q3 = data.frame(company = "Amazon", level = "L7", title = "Software Engineering Manager", yearsofexperience = 18, gender = "Other", Race = "Two Or More", Education = "Master's Degree") #800000
employee_q4 = data.frame(company = "Google", level = "L8", title = "Software Engineer", yearsofexperience = 23, gender = "Male", Race = "White", Education = "Bachelor's Degree") #1160000
pred_salary_q1 = exp(predict(aic_model_final, newdata = employee_q1))
pred_salary_q2 = exp(predict(aic_model_final, newdata = employee_q2))
pred_salary_q3 = exp(predict(aic_model_final, newdata = employee_q3))
pred_salary_q4 = exp(predict(aic_model_final, newdata = employee_q4))
actual_salary_q1 = 61000
actual_salary_q2 = 694000
actual_salary_q3 = 800000
actual_salary_q4 = 1160000
pe_q1 = get_percent_error(pred_salary_q1, actual_salary_q1)
pe_q2 = get_percent_error(pred_salary_q2, actual_salary_q2)
pe_q3 = get_percent_error(pred_salary_q3, actual_salary_q3)
pe_q4 = get_percent_error(pred_salary_q4, actual_salary_q4)
##Predicted L1 salaries based on company
amazon_l1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
google_l1 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
amazon_l1
google_l1
amazon_salaries_gender
amazon_salaries_gender[1] + google_salaries_gender[1]
amazon_salaries_gender[2] + google_salaries_gender[2]
male_entry_salary = amazon_salaries_gender[1] + google_salaries_gender[1]
female_entry_salary = amazon_salaries_gender[2] + google_salaries_gender[2]
male_entry_salary / female_entry_salary
male_entry_salary = amazon_salaries_gender[1] + google_salaries_gender[1]
female_entry_salary = amazon_salaries_gender[2] + google_salaries_gender[2]
1 - male_entry_salary / female_entry_salary
male_entry_salary = amazon_salaries_gender[1] + google_salaries_gender[1]
female_entry_salary = amazon_salaries_gender[2] + google_salaries_gender[2]
male_entry_salary / female_entry_salary - 1
male_entry_salary = amazon_salaries_gender[1] + google_salaries_gender[1]
female_entry_salary = amazon_salaries_gender[2] + google_salaries_gender[2]
round(male_entry_salary / female_entry_salary - 1, 2)
options(digits = 4)
#Loading dataset and importing libraries
library(readr)
library(stringr)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
#Remove NA records
salaries = na.omit(salaries)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Variable Selection: Removed variables that contain redundant information or lack of information
salaries = subset(salaries, select = c(company, level, title,
totalyearlycompensation, location,
yearsofexperience, yearsatcompany, tag,
gender, Race, Education))
#Importing library
library(caret)
#Split the data 70-30 into train and test sets
set.seed(22)
trn_idx = createDataPartition(salaries$level, p = 0.7, list = F)
trn = salaries[trn_idx, ]
tst = salaries[-trn_idx, ]
#Model w/ 'totalyearlycompensation' as the response variable and all remaining variables as the predictors
salaries_model = lm(totalyearlycompensation ~ ., data = trn)
#Backward AIC
salaries_model_back_aic = step(salaries_model,
direction = "backward", trace = 0)
#Backward BIC
salaries_model_back_bic = step(salaries_model, direction = "backward",
k = log(nrow(trn)), trace = 0)
#Performing anova test on the AIC and BIC models
anova(salaries_model_back_bic, salaries_model_back_aic)
#Checking the collinearity of the AIC model
car::vif(salaries_model_back_aic)
#Performing log response transformation to improve linearity
aic_model_log = lm(log(totalyearlycompensation) ~ company + yearsofexperience + title + level + gender + Race + Education, data = trn)
#Adding interactions to improve normality, linearity and constant variance
aic_model_trans = lm(log(totalyearlycompensation) ~ (company + yearsofexperience + title) ^ 2 + level + gender + Race + Education, data = trn)
#Performing anova test between the two models
anova(aic_model_log, aic_model_trans)
#Removing influential data points from the model
aic_model_final = lm(log(totalyearlycompensation) ~ (company + yearsofexperience + title) ^ 2 + level + gender + Race + Education, data = trn, subset = cooks.distance(aic_model_trans) < 4 / length(cooks.distance(aic_model_trans)))
#Importing libraries
library(car)
library(lmtest)
library(boot)
library(knitr)
#LOOCV RMSE Function - Gets the difference between the predicted values a model generates and the actual values
get_loocv_rmse = function(model){
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
#Diagnostics
adj_initial = summary(salaries_model)$adj
adj_aic = summary(salaries_model_back_aic)$adj
adj_log = summary(aic_model_log)$adj
adj_final = summary(aic_model_final)$adj
loocv_rmse_final = get_loocv_rmse(aic_model_final)
shapiro_final = shapiro.test(resid(aic_model_final))$p.value
bp_final = test = bptest(aic_model_final)$p.value
loocv_rmse_final
#Get Percent Error Function - Calculates the percentage of error we expect our model to generate
get_percent_error = function(pred_salary, actual_salary){
mean((abs(pred_salary - actual_salary) / pred_salary)) * 100
}
#Calculating average percent error of the test set
actual_salary = tst$totalyearlycompensation
pred_salary = exp(predict(aic_model_final, tst))
max_pe_salary = ifelse(max(actual_salary) > max(pred_salary), max(actual_salary), max(pred_salary))
percent_error = get_percent_error(pred_salary, actual_salary)
#Simulation Set-Up
num_sims = 1000
rmse_trn = rep(0, num_sims)
rmse_tst = rep(0, num_sims)
#RMSE Function - Finds the difference between the predicted values and the actual values
rmse = function(y, y_hat){
sqrt(sum((y - y_hat) ^ 2) / length(y))
}
#Storing Train RMSE and Test RMSE
for(i in 1:num_sims){
sim_fit = lm(log(totalyearlycompensation) ~ (company + yearsofexperience + title) ^ 2 + level + gender + Race + Education, data = trn)
rmse_trn[i] = rmse(trn$totalyearlycompensation, exp(predict(sim_fit, trn)))
rmse_tst[i] = rmse(tst$totalyearlycompensation, exp(predict(sim_fit, tst)))
}
#Predicting a person's salary based upon their level
level= c("L1", "L2", "L3", "L4", "L5", "L6", "L7", "L8")
amazon_salaries_level = rep(0, length(level))
google_salaries_level = rep(0, length(level))
for(i in 1:length(level)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = level[i], title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = level[i], title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree")))
amazon_salaries_level[i] = sal1
google_salaries_level[i] = sal2
}
#Predicting a person's salary based upon their years of experience
years = c(0, 5, 10, 15, 20, 25, 30, 35, 40)
amazon_salaries_years = rep(0, length(years))
google_salaries_years = rep(0, length(years))
for(i in 1:length(years)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L3", title = "Software Engineer", yearsofexperience = years[i], gender = "Male", Race = "White", Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L3", title = "Software Engineer", yearsofexperience = years[i], gender = "Male", Race = "White", Education = "Bachelor's Degree")))
amazon_salaries_years[i] = sal1
google_salaries_years[i] = sal2
}
#Predicting a person's salary based upon their title
title = c("Sales", "Human Resources", "Product Manager", "Software Engineer", "Data Scientist")
amazon_salaries_title = rep(0, length(title))
google_salaries_title = rep(0, length(title))
for(i in 1:length(title)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L3", title = title[i], yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L3", title = title[i], yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree")))
amazon_salaries_title[i] = sal1
google_salaries_title[i] = sal2
}
#Initializing variables for predicting a persons salary based upon their race
race = c("White", "Black", "Hispanic", "Asian", "Two Or More")
amazon_salaries_race = rep(0, length(unique(salaries$Race)))
google_salaries_race = rep(0, length(unique(salaries$Race)))
for(i in 1:length(unique(salaries$Race))) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = race[i], Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = race[i], Education = "Bachelor's Degree")))
amazon_salaries_race[i] = sal1
google_salaries_race[i] = sal2
}
# Initializing variables for predicting a person's salary based upon their gender
gender = c("Male", "Female")
amazon_salaries_gender = rep(0, length(gender))
google_salaries_gender = rep(0, length(gender))
for(i in 1:length(gender)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = gender[i], Race = "White", Education = "Bachelor's Degree")))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = gender[i], Race = "White", Education = "Bachelor's Degree")))
amazon_salaries_gender[i] = sal1
google_salaries_gender[i] = sal2
}
#Prediction of how much  more entry level male will be paid more than female counterpart
male_entry_salary = amazon_salaries_gender[1] + google_salaries_gender[1]
female_entry_salary = amazon_salaries_gender[2] + google_salaries_gender[2]
male_vs_female_salary = round(male_entry_salary / female_entry_salary - 1, 2)
# Initializing variables for predicting a person's salary based upon their education level
education_levels = c("Highschool", "Bachelor's Degree", "Master's Degree", "PhD", "Some College")
amazon_salaries_education = rep(0, length(education_levels))
google_salaries_education = rep(0, length(education_levels))
for(i in 1:length(education_levels)) {
sal1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = education_levels[i])))
sal2 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = education_levels[i])))
amazon_salaries_education[i] = sal1
google_salaries_education[i] = sal2
}
##Predicted L3 salaries based on company
amazon_l1 = exp(predict(aic_model_final, data.frame(company = "Amazon", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
google_l1 = exp(predict(aic_model_final, data.frame(company = "Google", level = "L3", title = "Software Engineer", yearsofexperience = 0, gender = "Male", Race = "White", Education = "Bachelor's Degree"), interval = "prediction"))[1]
row_names = c("Average RMSE Train", "Average RMSE Test", "Percent Error")
column_names = c("Statistic", "Value")
diagnostics = c(mean(rmse_trn), mean(rmse_tst), percent_error)
df_results = data.frame(row_names, diagnostics)
kable(df_results, "simple", col.names = column_names)
row_names = c("Initial Model", "AIC Model","Log Response Model", "Final Model")
column_names = c("Model", "Adjusted R")
adj_r = c(adj_initial, adj_aic, adj_log, adj_final)
df_results = data.frame(row_names, adj_r)
kable(df_results, "simple", col.names = column_names)
par(mfrow = c(1,3))
# Q-Q plot of initial model without log response transformation
qqnorm(resid(salaries_model_back_aic), main = "Normal Q-Q Plot Before Log Response", col = "darkgrey")
qqline(resid(salaries_model_back_aic), col = "dodgerblue", lwd = 2)
# Q-Q plot after log response transformation
qqnorm(resid(aic_model_log), main = "Normal Q-Q Plot After Log Response", col = "darkgrey")
qqline(resid(aic_model_log), col = "dodgerblue", lwd = 2)
# Q-Q plot after all transformations
qqnorm(resid(aic_model_final), main = "Normal Q-Q Plot After All Transformations", col = "darkgrey")
qqline(resid(aic_model_final), col = "dodgerblue", lwd = 2)
par(mfrow = c(1,3))
#Residuals vs Fitted plot of initial model without log response transformation
plot(fitted(salaries_model_back_aic), resid(salaries_model_back_aic), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Resids Before Log Response")
abline(h = 0, col = "darkorange", lwd = 2)
#Residuals vs Fitted plot after log response transformation
plot(fitted(aic_model_log), resid(aic_model_log), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Resids After Log Response")
abline(h = 0, col = "darkorange", lwd = 2)
#Residuals vs Fitted plot after all transformations
plot(fitted(aic_model_final), resid(aic_model_final), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Resids After All Transformations")
abline(h = 0, col = "darkorange", lwd = 2)
plot(pred_salary, actual_salary,
col = "darkgrey",
xlab = "Predicted Salaries",
ylab = "Actual Salaries",
main = "Predicted vs. Actual Salaries",
xlim = c(0, max_pe_salary),
ylim = c(0, max_pe_salary)
)
abline(0, 1, col = "dodgerblue")
# Define common y-axis limits
max_salary = max(c(amazon_salaries_level, google_salaries_level))*1.1
# Plot
par(mfrow = c(1,2))
barplot(amazon_salaries_level, names.arg = level, col=rainbow(length(amazon_salaries_level)),
main = "AMZN: Salary Based on Level", xlab = "Level", ylab = "Total Compensation", ylim = c(0, max_salary))
barplot(google_salaries_level, names.arg = level, col=rainbow(length(google_salaries_level)),
main = "GOOG: Salary Based on Level", xlab = "Level", ylab = "Total Compensation", ylim = c(0, max_salary))
# Define common y-axis limits
max_salary = max(c(amazon_salaries_years, google_salaries_years))*1.1
# Plot
par(mfrow = c(1,2))
barplot(amazon_salaries_years, names.arg = years, col=rainbow(length(amazon_salaries_years)),
main = "AMZN: L3 Salary Based on Years of Experience", xlab = "Years of Experience", ylab = "Total Compensation", ylim = c(0, max_salary))
barplot(google_salaries_years, names.arg = years, col=rainbow(length(google_salaries_years)),
main = "GOOG: L3 Salary Based on Years of Experience", xlab = "Years of Experience", ylab = "Total Compensation", ylim = c(0, max_salary))
# Define common y-axis limits
max_salary = max(c(amazon_salaries_title, google_salaries_title))*1.1
# Plot
par(mfrow = c(1,2))
barplot(amazon_salaries_title, names.arg = title, col=rainbow(length(amazon_salaries_title)),
main = "AMZN: L3 Salary Based on Title", xlab = "Title", ylab = "Total Compensation", ylim = c(0, max_salary), cex.names = .6)
barplot(google_salaries_title, names.arg = title, col=rainbow(length(google_salaries_title)),
main = "GOOG: L3 Salary Based on Title", xlab = "Title", ylab = "Total Compensation", ylim = c(0, max_salary), cex.names = .6)
# Define common y-axis limits
max_salary = max(c(amazon_salaries_race, google_salaries_race))*1.1
# Plot
par(mfrow = c(1,2))
barplot(amazon_salaries_race, names.arg = race, col=rainbow(length(amazon_salaries_race)),
main = "AMZN: L3 Salary Based on Race", xlab = "Race", ylab = "Total Compensation", ylim = c(0, max_salary))
barplot(google_salaries_race, names.arg = race, col=rainbow(length(google_salaries_race)),
main = "GOOG: L3 Salary Based on Race", xlab = "Race", ylab = "Total Compensation", ylim = c(0, max_salary))
# Define common y-axis limits
max_salary = max(c(amazon_salaries_gender, google_salaries_gender))*1.1
# Plot
par(mfrow = c(1,2))
barplot(amazon_salaries_gender, names.arg = gender, col=c("blue", "red"),
main = "AMZN: L3 Salary Based on Gender", xlab = "Gender", ylab = "Total Compensation", ylim = c(0, max_salary))
barplot(google_salaries_gender, names.arg = gender, col=c("blue", "red"),
main = "GOOG: L3 Salary Based on Gender", xlab = "Gender", ylab = "Total Compensation", ylim = c(0, max_salary))
# Define common y-axis limits
max_salary = max(c(amazon_salaries_education, google_salaries_education))*1.1
# Plot
par(mfrow = c(1,2))
barplot(amazon_salaries_education, names.arg = education_levels, col=rainbow(length(amazon_salaries_education)),
main = "AMZN: L3 Salary Based on Education Level", xlab = "Education", ylab = "Total Compensation", ylim = c(0, max_salary),
cex.names = .6)
barplot(google_salaries_education, names.arg = education_levels, col=rainbow(length(google_salaries_education)),
main = "GOOG: L3 Salary Based on Education Level", xlab = "Education", ylab = "Total Compensation", ylim = c(0, max_salary),
cex.names = .6)
options(scipen = 999)
#HERE FOR NOW BUT WILL BE CLEANED UP
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
#Remove NA records
salaries = na.omit(salaries)
#Create new column 'State' which converts location to just the state abbreviation
salaries$state = str_sub(salaries$location,-2,-1)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$state = as.factor(salaries$state)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Variable Selection: Removed variables that contain redundant information or lack of information
salaries = subset(salaries, select = c(company, level, title,
totalyearlycompensation,
yearsofexperience, yearsatcompany, tag,
gender, Race, state, Education))
salaries_model = lm(totalyearlycompensation ~ ., data = salaries)
#Didnt use p but n was used for model BIC models
#p = length(coef(salaries_model))
n = length(resid(salaries_model))
#Backward AIC
salaries_model_back_aic = step(salaries_model,
direction = "backward", trace = 0)
#Backward BIC
salaries_model_back_bic = step(salaries_model, direction = "backward",
k = log(nrow(salaries)), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
#Forward AIC
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
#Forward BIC
salaries_model_forw_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", k = log(nrow(salaries)), trace = 0)
#Stepwise AIC
salaries_model_both_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", trace = 0)
#Stepwise BIC
salaries_model_both_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", k = log(nrow(salaries)), trace = 0)
library(lmtest)
salaries_model_add = lm(log(totalyearlycompensation) ~ (yearsatcompany + company + title + state + level) ^ 2, data = salaries)
salaries_model_fix = lm(log(totalyearlycompensation) ~ (yearsatcompany + company + title + state + level) ^ 2, data = salaries, subset = cooks.distance(salaries_model_add) < 4 / length(cooks.distance(salaries_model_add)))
hist(resid(salaries_model_fix))
#salaries_model_int = lm(totalyearlycompensation ~ level * title * yearsofexperience * yearsatcompany, data = salaries)
#anova(salaries_model_add, salaries_model_int)
#summary(salaries_model_int)
#salaries_model_three_int = lm(totalyearlycompensation ~ company * level * yearsofexperience, data = salaries)
qqnorm(resid(salaries_model_fix))
qqline(resid(salaries_model_fix))
plot(fitted(salaries_model_fix), resid(salaries_model_fix))
abline(h=0)
shapiro.test(resid(salaries_model_fix))
bptest(salaries_model_fix)
#anova(salaries_model_add, salaries_model_two_int)
#anova(salaries_model_two_int, salaries_model_three_int)
library(car)
library(lmtest)
get_loocv_rmse = function(model){
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
#start_model = lm(log(totalyearlycompensation) ~ . ^ 2, data = salaries)
#aic_model = step(start_model, direction = "backward", trace = 0)
#Check for collinearity
car::vif(salaries_model_both_aic) #Nothing too bad, perhaps level is high
#Transform log response and add interactions to predictors to improve normality, linearity, constant variance, adjusted R-squared, and loocv-RMSE
aic_model_trans_2 = lm(log(totalyearlycompensation) ~ (company + yearsofexperience + title) ^ 2 + level + gender + Race + Education, data = salaries)
aic_model_trans = lm(log(totalyearlycompensation) ~ (company + yearsofexperience + title) ^ 2 + gender + Race + Education + level, data = salaries)
anova(aic_model_trans, aic_model_trans_2)
#Remove influential data from the model
aic_model_fix = lm(log(totalyearlycompensation) ~ (company + yearsofexperience + title) ^ 2 + gender + Race + Education + level, data = salaries, subset = cooks.distance(aic_model_trans) < 4 / length(cooks.distance(aic_model_trans)))
#Run diagnostics
summary(aic_model_fix)$adj
get_loocv_rmse(aic_model_fix)
shapiro.test(resid(aic_model_fix))
bptest(aic_model_fix)
#Plot diagnostics
par(mfrow = c(1, 2))
# Residuals vs Fitted values plot
plot(fitted(aic_model_fix), resid(aic_model_fix), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
# Q-Q plot
qqnorm(resid(aic_model_fix), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(aic_model_fix), col = "dodgerblue", lwd = 2)
#Create new column 'State' which converts location to just the state abbreviation
#salaries$state = str_sub(salaries$location,-2,-1)
#Didnt use p but n was used for model BIC models
#p = length(coef(salaries_model))
n = length(resid(salaries_model))
#Backward AIC
salaries_model_back_aic = step(salaries_model,
direction = "backward", trace = 0)
#Backward BIC
salaries_model_back_bic = step(salaries_model, direction = "backward",
k = log(nrow(salaries)), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
#Forward AIC
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
#Forward BIC
salaries_model_forw_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", k = log(nrow(salaries)), trace = 0)
#Stepwise AIC
salaries_model_both_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", trace = 0)
#Stepwise BIC
salaries_model_both_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", k = log(nrow(salaries)), trace = 0)
