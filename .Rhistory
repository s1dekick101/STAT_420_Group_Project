salaries = na.omit(salaries)
#Create new column 'State' which only shows the Convert to State
salaries$state = str_sub(salaries$location,-2,-1)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$state = as.factor(salaries$state)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Removing unimportant variables
salaries = subset(salaries, select = c(company, level, title, totalyearlycompensation, yearsofexperience, yearsatcompany, tag, basesalary, stockgrantvalue, bonus, gender, Race, Education, state))
#salaries = subset(salaries, select = -c(timestamp, otherdetails, cityid, dmaid, rowNumber, location, Masters_Degree, Bachelors_Degree, Highschool, Some_College, ))
View(salaries)
#Loading dataset
library(readr)
library(stringr)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
#Remove NA records
salaries = na.omit(salaries)
#Create new column 'State' which only shows the Convert to State
salaries$state = str_sub(salaries$location,-2,-1)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$state = as.factor(salaries$state)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Variable Selection
salaries = subset(salaries, select = c(company, level, title, totalyearlycompensation, yearsofexperience, yearsatcompany, tag, basesalary, stockgrantvalue, bonus, gender, Race, Education, state))
# Placeholder and we will just put the model we actually use here
model = 2
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
salaries_model_all
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
#Loading dataset
library(readr)
library(stringr)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
#Remove NA records
salaries = na.omit(salaries)
#Create new column 'State' which only shows the Convert to State
salaries$state = str_sub(salaries$location,-2,-1)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$state = as.factor(salaries$state)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Variable Selection
salaries = subset(salaries, select = c(company, level, title,
totalyearlycompensation,
yearsofexperience, yearsatcompany, tag,
basesalary, stockgrantvalue, bonus,
gender, Race, Education, state))
salaries
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
salaries_model_all
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library(faraway)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
library(faraway)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
View(salaries)
library(faraway)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
pairs(salaries, col = "dodgerblue")
#Loading dataset
library(readr)
library(stringr)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
#Remove NA records
salaries = na.omit(salaries)
#Create new column 'State' which only shows the Convert to State
salaries$state = str_sub(salaries$location,-2,-1)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$state = as.factor(salaries$state)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Feel free to comment out until we get confirmation from TA on removing columns or not
#Variable Selection - Removed variables that contained redundant information
salaries = subset(salaries, select = c(company, level, title,
totalyearlycompensation,
yearsofexperience, yearsatcompany, tag,
basesalary, stockgrantvalue, bonus,
gender, Race, Education, state))
# Placeholder and we will just put the model we actually use here
model = 2
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
p = length(coef(salaries_model_all))
n = length(resid(salaries_model_all))
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library(leps)
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library(leaps)
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library("leaps")
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library(leaps)
install.packages("leaps")
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library(leaps)
p = length(coef(salaries_model_all))
n = length(resid(salaries_model_all))
salaries_model_all_aic = n * log(salaries_model_all$residuals)
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library(leaps)
test = summary(regsubsets(totalyearlycompensation ~ ., data = salaries))
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library(leaps)
test = summary(regsubsets(totalyearlycompensation ~ ., data = salaries))
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
library(leaps)
test = summary(regsubsets(totalyearlycompensation ~ ., data = salaries))
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward")
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_aic
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 1)
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_aic
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_aic
predict(salaries_model_all_back_aic, data.frame(company = "Amazon"))
predict(salaries_model_all_back_aic, data.frame(company = "Google"))
predict(salaries_model_all_back_aic, data.frame(company = "Amazon", level = "L1", yearsatcompany = 1,
basesalary = 120000, stockgrantvalue = 50000, bonus = 0))
#Loading dataset
library(readr)
library(stringr)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
#Remove NA records
salaries = na.omit(salaries)
#Create new column 'State' which only shows the Convert to State
salaries$state = str_sub(salaries$location,-2,-1)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$state = as.factor(salaries$state)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Feel free to comment out until we get confirmation from TA on removing columns or not
#Variable Selection: Removed variables that contained redundant information
#salaries = subset(salaries, select = c(company, level, title,
#                                       totalyearlycompensation,
#                                       yearsofexperience, yearsatcompany, tag,
#                                       basesalary, stockgrantvalue, bonus,
#                                       gender, Race, Education, state))
salaries = subset(salaries, select = c(company, level, title,
totalyearlycompensation,
yearsofexperience, yearsatcompany, tag,
gender, Race, Education, state))
# Placeholder and we will just put the model we actually use here
model = 2
salaries_model_all = lm(totalyearlycompensation ~ ., data = salaries)
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_aic
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 1)
salaries_model_all_back_aic
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_aic
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_bic = step(salaries_model_all, direction = "backward", k = log(n), trace = 0)
salaries_model_all_back_aic = step(salaries_model_all, direction = "backward", trace = 0)
salaries_model_all_back_bic = step(salaries_model_all, direction = "backward", k = log(n), trace = 0)
salaries_model_all_back_bic
salaries_model = lm(totalyearlycompensation ~ ., data = salaries)
salaries_model_back_aic = step(salaries_model, direction = "backward", trace = 0)
salaries_model_back_bic = step(salaries_model, direction = "backward", k = log(n), trace = 0)
salaries_model_back_bic
salaries_model_back_aic = step(salaries_model, direction = "backward", trace = 0)
salaries_model_back_bic = step(salaries_model, direction = "backward", k = log(n), trace = 0)
salaries_model_back_bic
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward")
salaries_model_back_aic = step(salaries_model, direction = "backward", trace = 0)
salaries_model_back_bic = step(salaries_model, direction = "backward", k = log(n), trace = 0)
salaries_model_back_bic
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
salaries_model_back_aic = step(salaries_model, direction = "backward", trace = 0)
salaries_model_back_bic = step(salaries_model, direction = "backward", k = log(n), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
salaries_model_forw_aic
salaries_model_back_aic = step(salaries_model, direction = "backward", trace = 0)
salaries_model_back_bic = step(salaries_model, direction = "backward", k = log(n), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
salaries_model_forw_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", k = log(n), trace = 0)
salaries_model_forw_bic
salaries_model_forw_aic
salaries_model_forw_bic
salaries_model_back_aic = step(salaries_model, direction = "backward", trace = 0)
salaries_model_back_bic = step(salaries_model, direction = "backward", k = log(n), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
salaries_model_forw_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", k = log(n), trace = 0)
salaries_model_both_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", trace = 0)
salaries_model_both_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", k = log(n), trace = 0)
salaries_model_back_aic = step(salaries_model, direction = "backward", trace = 0)
salaries_model_back_bic = step(salaries_model, direction = "backward", k = log(n), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
salaries_model_forw_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", k = log(n), trace = 0)
salaries_model_both_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", trace = 0)
salaries_model_both_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", k = log(n), trace = 0)
salaries_model_back_aic
salaries_model_back_bic
salaries_model_forw_aic
salaries_model_forw_bic
salaries_model_both_aic
salaries_model_both_bic
names(salaries_model_back_aic)
salaries_model_back_bic
salaries_model_forw_aic
salaries_model_forw_bic
salaries_model_both_aic
salaries_model_both_bic
names(coefficients(salaries_model_back_aic))
salaries_model_back_bic
salaries_model_forw_aic
salaries_model_forw_bic
salaries_model_both_aic
salaries_model_both_bic
salaries_model_back_aic
salaries_model_back_bic
salaries_model_forw_aic
salaries_model_forw_bic
salaries_model_both_aic
salaries_model_both_bic
predictors(salaries_model_back_aic)
find_predictors(salaries_model_back_aic)
length(salaries_model_back_aic)
salaries_model_back_aic
salaries_model_back_bic
salaries_model_forw_aic
salaries_model_forw_bic
salaries_model_both_aic
salaries_model_both_bic
#Loading dataset
library(readr)
library(stringr)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
#Remove NA records
salaries = na.omit(salaries)
#Create new column 'State' which only shows the Convert to State
salaries$state = str_sub(salaries$location,-2,-1)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$state = as.factor(salaries$state)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Feel free to uncomment until we get confirmation from TA on removing columns or not
#Variable Selection: Removed variables that contained redundant information
#salaries = subset(salaries, select = c(company, level, title,
#                                       totalyearlycompensation,
#                                       yearsofexperience, yearsatcompany, tag,
#                                       basesalary, stockgrantvalue, bonus,
#                                       gender, Race, Education, state))
salaries = subset(salaries, select = c(company, level, title,
totalyearlycompensation,
yearsofexperience, yearsatcompany, tag,
gender, Race, Education, state))
# Placeholder and we will just put the model we actually use here
model = 2
salaries_model = lm(totalyearlycompensation ~ ., data = salaries)
#Backward AIC
salaries_model_back_aic = step(salaries_model,
direction = "backward", trace = 0)
#Backward BIC
salaries_model_back_bic = step(salaries_model, direction = "backward",
k = log(n), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
#Forward AIC
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
#Forward BIC
salaries_model_forw_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", k = log(n), trace = 0)
#Stepwise AIC
salaries_model_both_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", trace = 0)
#Stepwise BIC
salaries_model_both_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", k = log(n), trace = 0)
#AIC derives a model using 4 of the 10 initial inputted predictors
salaries_model_back_aic
salaries_model_forw_aic
salaries_model_both_aic
#BIC derives a model using 9 of the 10 initial inputted predictors
salaries_model_back_bic
salaries_model_forw_bic
salaries_model_both_bic
#Loading dataset
library(readr)
library(stringr)
salaries = read_csv("Levels-Fyi-Salary-Data-Cleaned-US.csv")
#Remove NA records
salaries = na.omit(salaries)
#Create new column 'State' which only shows the Convert to State
salaries$state = str_sub(salaries$location,-2,-1)
#Changing some predictors to factors
salaries$company = as.factor(salaries$company)
salaries$level = as.factor(salaries$level)
salaries$title = as.factor(salaries$title)
salaries$location = as.factor(salaries$location)
salaries$state = as.factor(salaries$state)
salaries$gender = as.factor(salaries$gender)
salaries$Race = as.factor(salaries$Race)
salaries$Education = as.factor(salaries$Education)
#Feel free to uncomment until we get confirmation from TA on removing columns or not
#Variable Selection: Removed variables that contained redundant information
#salaries = subset(salaries, select = c(company, level, title,
#                                       totalyearlycompensation,
#                                       yearsofexperience, yearsatcompany, tag,
#                                       basesalary, stockgrantvalue, bonus,
#                                       gender, Race, Education, state))
salaries = subset(salaries, select = c(company, level, title,
totalyearlycompensation,
yearsofexperience, yearsatcompany, tag,
gender, Race, Education, state))
# Placeholder and we will just put the model we actually use here
model = 2
salaries_model = lm(totalyearlycompensation ~ ., data = salaries)
#Backward AIC
salaries_model_back_aic = step(salaries_model,
direction = "backward", trace = 0)
#Backward BIC
salaries_model_back_bic = step(salaries_model, direction = "backward",
k = log(n), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
#Forward AIC
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
#Forward BIC
salaries_model_forw_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", k = log(n), trace = 0)
#Stepwise AIC
salaries_model_both_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", trace = 0)
#Stepwise BIC
salaries_model_both_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", k = log(n), trace = 0)
#AIC derives a model using 4 of the 10 initial inputted predictors
salaries_model_back_aic
salaries_model_forw_aic
salaries_model_both_aic
#BIC derives a model using 9 of the 10 initial inputted predictors
salaries_model_back_bic
salaries_model_forw_bic
salaries_model_both_bic
n = length(resid(salaries_model))
n = length(resid(salaries_model))
n
p = length(coef(salaries_model))
n = length(resid(salaries_model))
#Backward AIC
salaries_model_back_aic = step(salaries_model,
direction = "backward", trace = 0)
#Backward BIC
salaries_model_back_bic = step(salaries_model, direction = "backward",
k = log(n), trace = 0)
salaries_model_start = lm(totalyearlycompensation ~ 1, data = salaries)
#Forward AIC
salaries_model_forw_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", trace = 0)
#Forward BIC
salaries_model_forw_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "forward", k = log(n), trace = 0)
#Stepwise AIC
salaries_model_both_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", trace = 0)
#Stepwise BIC
salaries_model_both_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state,
direction = "both", k = log(n), trace = 0)
#AIC derives a model using 4 of the 10 initial inputted predictors
salaries_model_back_aic
salaries_model_forw_aic
salaries_model_both_aic
#BIC derives a model using 9 of the 10 initial inputted predictors
salaries_model_back_bic
salaries_model_forw_bic
salaries_model_both_bic
salaries_model_back_bic
#Stepwise AIC
salaries_model_both_aic = step(salaries_model_start,
scope = totalyearlycompensation ~ (company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state) ^ 2,
direction = "both", trace = 0)
#Stepwise BIC
salaries_model_both_bic = step(salaries_model_start,
scope = totalyearlycompensation ~ (company + level +
title + yearsofexperience + yearsatcompany + tag +
gender + Race + Education + state) ^ 2,
direction = "both", k = log(n), trace = 0)
salaries_model_both_aic
salaries_model_both_baic
salaries_model_both_bic
